// <auto-generated />
using System;
using InnoClinic.AppointmentsAPI.Infrastructure.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InnoClinic.AppointmentsAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20230226115936_ChangeTimeSlotType")]
    partial class ChangeTimeSlotType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InnoClinic.AppointmentsAPI.Core.Entitites.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("OfficeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<string>("ServiceName")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5549e81-765b-4f7f-a21f-584fd1dc942a"),
                            Date = new DateTime(2023, 2, 26, 14, 59, 36, 558, DateTimeKind.Local).AddTicks(2781),
                            DoctorId = new Guid("4575b750-37e9-4194-ba18-b9219ac703b6"),
                            OfficeId = "639990c96e070a016e91e332",
                            PatientId = new Guid("61f80132-8914-4995-8c8f-cdabcd756d4c"),
                            ServiceId = new Guid("8c6d093c-c52c-4a9b-709b-08dac166520c"),
                            ServiceName = "SomeName1",
                            Status = 0,
                            Time = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("b3b0d2b0-f0f1-46ab-87d2-52c7f29cd9b8"),
                            Date = new DateTime(2023, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("8e19b6bf-3c40-403c-a984-d713e300b0e7"),
                            OfficeId = "639990c96e070a016e91e332",
                            PatientId = new Guid("63a62769-de2a-4073-991f-c18f1a44df26"),
                            ServiceId = new Guid("24d92a89-a088-4687-9947-08dac62592e6"),
                            ServiceName = "SomeName2",
                            Status = 0,
                            Time = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("f84e6d4a-572e-46f1-909d-3ad50b02a88e"),
                            Date = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("8e19b6bf-3c40-403c-a984-d713e300b0e7"),
                            OfficeId = "639990c96e070a016e91e332",
                            PatientId = new Guid("61f80132-8914-4995-8c8f-cdabcd756d4c"),
                            ServiceId = new Guid("24d92a89-a088-4687-9947-08dac62592e6"),
                            ServiceName = "SomeName2",
                            Status = 0,
                            Time = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("54d11f1b-ef2b-4edd-906c-307b86e2da50"),
                            Date = new DateTime(2023, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("4575b750-37e9-4194-ba18-b9219ac703b6"),
                            OfficeId = "639990c96e070a016e91e332",
                            PatientId = new Guid("63a62769-de2a-4073-991f-c18f1a44df26"),
                            ServiceId = new Guid("8c6d093c-c52c-4a9b-709b-08dac166520c"),
                            ServiceName = "SomeName1",
                            Status = 0,
                            Time = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("d38fce23-10a6-45e1-a253-907e4be5b6a4"),
                            Date = new DateTime(2023, 2, 26, 14, 59, 36, 558, DateTimeKind.Local).AddTicks(2810),
                            DoctorId = new Guid("8e19b6bf-3c40-403c-a984-d713e300b0e7"),
                            OfficeId = "639990c96e070a016e91e332",
                            PatientId = new Guid("61f80132-8914-4995-8c8f-cdabcd756d4c"),
                            ServiceId = new Guid("8c6d093c-c52c-4a9b-709b-08dac166520c"),
                            ServiceName = "SomeName1",
                            Status = 0,
                            Time = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("7c567279-5584-4aa3-bb02-7052e866eab3"),
                            Date = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("4575b750-37e9-4194-ba18-b9219ac703b6"),
                            OfficeId = "639990c96e070a016e91e332",
                            PatientId = new Guid("61f80132-8914-4995-8c8f-cdabcd756d4c"),
                            ServiceId = new Guid("24d92a89-a088-4687-9947-08dac62592e6"),
                            ServiceName = "SomeName2",
                            Status = 0,
                            Time = new TimeSpan(0, 15, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("InnoClinic.AppointmentsAPI.Core.Entitites.Models.Result", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Complaints")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Conclusion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
